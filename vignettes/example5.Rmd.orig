---
title: "Running `bayesnec`"
output:
  rmarkdown::html_vignette:
vignette: >
  %\VignetteIndexEntry{Running `bayesnec`}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
bibliography: bayesnec.bib
---



[e1]: https://open-aims.github.io/bayesnec/articles/example1.html
[e2]: https://open-aims.github.io/bayesnec/articles/example2.html
[e2b]: https://open-aims.github.io/bayesnec/articles/example2b.html
[e3]: https://open-aims.github.io/bayesnec/articles/example3.html
[e4]: https://open-aims.github.io/bayesnec/articles/example4.html

The `bayesnec` package makes use of the R package `brms` [@Burkner2017; @Burkner2018]  (https://cran.r-project.org/web/packages/brms/index.html) which relies on `stan` (https://mc-stan.org/). You will need to have either `RStan` (https://mc-stan.org/users/interfaces/rstan.html) or  `cmdstanr`(https://mc-stan.org/cmdstanr/) installed and configured on your computer to run `bayesnec`.

Quick start guides can be found for both `RStan` https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started and `cmdstanr` https://mc-stan.org/cmdstanr/articles/cmdstanr.html. However, in our experience getting either package to work can be a bit fiddly, particularly on Windows machines. 

We have prepared an installation workflow for `cmdstanr` specifically for Windows 10 that may resolve issues if the above Quick start links fail to result in a working version of `brms`. Note that this workflow has also been known to resolve some issues with `RStan`, although it was not developed with that intention.

# `cmdstanr` installation workflow

These instructions are derived from the instructions at <https://mc-stan.org/docs/2_24/cmdstan-guide/cmdstan-installation.html>

The high level steps are:

1.  Install `Rtools`, this is what `cmdstan` will use to make the executables
2.  Install `git`, this is will be used to get the `cmdstan` code
3.  Install `cmdstan`
4.  Test `cmdstan` and run a model

These instructions assume you have R and Rstudio installed already.

## 1. Install `Rtools`

a.  Install `Rtools` from <https://cran.r-project.org/bin/windows/Rtools/>

b.  Go to the install location and check that the following usr\\bin and mingw64\\bin directories exist:

    -   C:\rtools40\\usr\\bin
    -   C:\rtools40\\mingw64\\bin

Check that a **mingw32-make.exe** file is in one of those directories.

`RTools` may not always install **mingw32-make.exe** but it can be installed manually if needed by the following instructions:

Open `RTools Bash`, which comes with `RTools` (hit Windows Key, type rtools bash, and hit enter). In the `RTools Bash` console window, type:

`pacman -Sy mingw-w64-x86_64-make`

Check that the `mingw32-make.exe` file is in one of the `RTools` folders listed in 1b.

c.  Add the directories to to the Windows Path using the "Edit the system environment variables" tool in Windows' Control Panel. A step by step guide on adding directories to the windows path can be found at <https://www.architectryan.com/2018/03/17/add-to-the-path-on-windows-10/>. Note that you will need administrator privileges on your computer to edit the environment variables.

-   Put the path in the system paths section (bottom section)
-   Note that you can also add the path `C:\cmdstan\stan\lib\stan_math\lib\tbb` to save having to do it later (in the later install `cmdstan` step below)

d.  Test the paths are set correctly

    -   Reboot your computer
    -   Start up R studio
    -   Navigate to the terminal (a tab co-located in the R console panel)
    -   Type `echo %PATH%`
    -   The paths you added should be in the output from that command. They should look something like:
        -   `\c\RTools\RTools40\usr\bin`

e.  Final check to see if it installed properly.

In the terminal type:

`g++ --version`

and

`mingw32-make --version`

Check that it both return a version number. If they produce an error there is a problem with the installation.

## 2. Install `git`

a.  If git is not already on your system, install it here: <https://git-scm.com/download/win>

b.  To check that git is installed. In RStudio:

    -   Navigate to the terminal
    -   type `git --version`
    -   Check that it returns a version number. If it produces an error there is a problem with the installation

## 3. Intall `cmdstan`

In R studio

a\. Navigate to the terminal

b\. change directory to c:\\ drive using the code: `cd \c`

c\. download latest version of cmdstan from githup - this may take a few minutes: `git clone https://github.com/stan-dev/cmdstan.git --recursive`

d\. change directory to where `cmdstan` is downloaded: `cd cmdstan`

e\. clean up the space (just to be sure): `mingw32-make clean-all`

f\. compile the code: `mingw32-make build`

This will take a few minutes and should end with similar phrase as """--- CmdStan v2.23.0 built ---"""

g\. Add `cmdstan` library to system environment path by adding `C:\cmdstan\stan\lib\stan_math\lib\tbb` to the path (using the same instructions as 1.c.)

h\. Reboot your computer

i\. `cmdstan` is missing a file that must be manually added to the `C:\cmdstan\make` folder. Open notepad and copy paste the following two lines of text:

`CXXFLAGS += -Wno-nonnull`

`TBB_CXXFLAGS= -U__MSVCRT_VERSION__ -D__MSVCRT_VERSION__=0x0E00`

k.  Save the file with the name `local` and ensure that it has no file extension. For example, if you used notepad the default file extension is .txt which can be deleted by right clicking the file and selecting rename. If you can't see the file extensions, click the view tab in your folder ribbon and make sure the `file name extension` box is checked. Instructions for how to remove a file extension can be found at: <https://www.computerhope.com/issues/ch002089.htm>

## 4. Test cmdstan in R studio

a.  Install the R package `cmdstanr` following the instructions at: <https://mc-stan.org/cmdstanr/articles/cmdstanr.html>

```{r install_cmdstanr, eval=FALSE}
# we recommend running this is a fresh R session or restarting your current session
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
```

b.  Make sure all these packages are installed and loaded.

```{r load_cmdstanr}
library(cmdstanr)
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
```

c.  Manually set the following options.

Make sure the path points to the `cmdstan` installation

```{r check cmdstan path}
cmdstan_path()
```

If not, manually set it

```{r set cmdstan path}
set_cmdstan_path("C:/cmdstan")
```

To use `cmdstan` as a backend for `brms` call the relevant options.

```{r set backend}
options(brms.backend = "cmdstanr")
```

Setting the path and backend may be required each time you use `cmdstan`

d.  Check that your toolchain is set up properly.

```{r toolchain check}
check_cmdstan_toolchain()
```

This should return the message `The C++ toolchain required for CmdStan is setup properly!`

### Compile a model

If `cmdstan` is installed, the following example model should work.

Set up data:

```{r fit model}
file <- file.path(cmdstan_path(), "examples", "bernoulli", "bernoulli.stan")
mod <- cmdstan_model(file)
mod$print()
```

Run a Monte Carlo Markov Chain:

```{r mcmc}
# names correspond to the data block in the Stan program
data_list <- list(N = 10, y = c(0,1,0,0,0,0,0,0,0,1))


fit <- mod$sample(
  data = data_list,
  seed = 123,
  chains = 4,
  parallel_chains = 4,
  refresh = 500
)
```

Check that the model has successfully fitted by examining the model parameters

```{r check model}
fit$summary()
```

### Run a model using brms

```{r check brmsmodel}
require(cmdstanr)
set_cmdstan_path("C:/cmdstan")
options(brms.backend = "cmdstanr")

require(brms)
fit <- brm(count ~ zAge + zBase * Trt + (1|patient),
            data = epilepsy, family = poisson(), silent = 2, refresh = 0)

summary(fit)
```


# References









